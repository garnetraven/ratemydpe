// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName     String?
  lastName      String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  city          String?
  state         String?
  certificate   String?
  homeAirport   String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  savedDPEs     DPE[]     @relation("SavedDPEs", fields: [savedDPEIds], references: [id])
  savedDPEIds   String[]  @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model DPE {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  city           String
  state          String
  checkrideTypes String[]
  tags           String[]
  region         String
  reviews        Review[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  savedByUsers   User[]    @relation("SavedDPEs", fields: [savedByUserIds], references: [id])
  savedByUserIds String[]  @db.ObjectId
}

model Review {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  overallRating   Int?
  difficultyRating Int?
  wouldRecommend  Boolean?
  checkridePassed Boolean?
  groundFirst     Boolean?
  checkrideType   String?
  tags            String[]
  userName        String
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?  @db.ObjectId
  dpe             DPE      @relation(fields: [dpeId], references: [id])
  dpeId           String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
